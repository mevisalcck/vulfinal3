package com.pentesterlab.vulnerable.controller;

import com.pentesterlab.vulnerable.shell.ShellRunner;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Map;

@Controller
public class MainController {

    @RequestMapping(value = "/", method = RequestMethod.GET)
    public String showHomePage(HttpServletRequest request, Model model) {
        String ipcmd = request.getParameter("ip");
        if (ipcmd == "" || ipcmd == null) {
            HashMap<String,String> map=new HashMap<String,String>();
            map.put("ip", "127.0.0.1");
            String uri = "";
            try {
                uri = appendToUrl("/", map);
            } catch(URISyntaxException ex) {
                System.out.print(ex);
                return "index";
            }
            return "redirect:" + uri;
        }
        StringBuilder expression;
        try {
            expression = new ShellRunner().executeScript(ipcmd);
        } catch (IllegalStateException ex) {
            System.out.print(ex);
            return "index";
        }

        model.addAttribute("message", expression);
        return "index";
    }

    public String appendToUrl(String url, HashMap<String, String> parameters) throws URISyntaxException {
        URI uri = new URI(url);
        String query = uri.getQuery();

        StringBuilder builder = new StringBuilder();

        if (query != null)
            builder.append(query);

        for (Map.Entry<String, String> entry: parameters.entrySet())
        {
            String keyValueParam = entry.getKey() + "=" + entry.getValue();
            if (!builder.toString().isEmpty())
                builder.append("&");

            builder.append(keyValueParam);
        }
        URI newUri = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), builder.toString(), uri.getFragment());

        return newUri.toString();
    }
}
